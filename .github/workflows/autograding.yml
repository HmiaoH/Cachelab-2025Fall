name: GitHub Classroom Workflow

on: 
  push:
    branches: [ main, dev-* ]
  pull_request:
    branches: [ main ]

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ make python3 python3-pip bc
          
      - name: Setup environment
        run: |
          gcc --version
          g++ --version
          python3 --version

      - name: Compilation Test
        id: compilation
        run: |
          echo "Testing compilation..."
          make clean
          make all
          if [ $? -eq 0 ]; then
            echo "‚úì Compilation successful"
            echo "points=20" >> $GITHUB_OUTPUT
          else
            echo "‚úó Compilation failed"
            echo "points=0" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Legality Test
        id: legality
        run: |
          echo "Testing code legality..."
          cd test
          bash test.sh
          if [ $? -eq 0 ]; then
            echo "‚úì Legality test passed"
            echo "points=10" >> $GITHUB_OUTPUT
          else
            echo "‚úó Legality test failed"
            echo "points=0" >> $GITHUB_OUTPUT
          fi

      - name: Cache Simulator Tests
        id: cache-tests
        run: |
          echo "Testing cache simulator with Python test suite..."

          # Run the comprehensive Python test
          cd test
          python3 csim_test2.py

          # Read the score from the result file
          if [ -f ".autograder_result" ]; then
            score=$(cat .autograder_result)
            # Scale score from 0-100 to 0-40 (40 points total for cache tests)
            scaled_points=$(python3 -c "import math; print(int($score * 0.4))")
            echo "Python test score: $score%"
            echo "Scaled points: $scaled_points/40"
            echo "points=$scaled_points" >> $GITHUB_OUTPUT

            if [ $(echo "$score >= 80" | bc -l) -eq 1 ]; then
              echo "‚úì Cache simulator tests passed with ${score}% accuracy"
            else
              echo "‚ö† Cache simulator tests completed with ${score}% accuracy"
            fi
          else
            echo "‚úó Test result file not found"
            echo "points=0" >> $GITHUB_OUTPUT
          fi

      - name: Matrix Multiplication Performance Test
        id: gemm-test
        run: |
          echo "Testing matrix multiplication performance..."
          if [ -f "./printTrace" ]; then
            # Test basic functionality
            timeout 30 ./printTrace case1 > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "‚úì Matrix multiplication basic test passed"
              echo "points=25" >> $GITHUB_OUTPUT
            else
              echo "‚úó Matrix multiplication test failed or timed out"
              echo "points=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚úó printTrace executable not found"
            echo "points=0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate Final Score
        run: |
          comp_points="${{ steps.compilation.outputs.points || 0 }}"
          legal_points="${{ steps.legality.outputs.points || 0 }}"
          cache_points="${{ steps.cache-tests.outputs.points || 0 }}"
          gemm_points="${{ steps.gemm-test.outputs.points || 0 }}"
          
          total=$((comp_points + legal_points + cache_points + gemm_points))
          
          echo "=== AUTOGRADING RESULTS ==="
          echo "Compilation: $comp_points/20"
          echo "Legality: $legal_points/10"
          echo "Cache Simulator: $cache_points/40"
          echo "Matrix Multiplication: $gemm_points/25"
          echo "=========================="
          echo "TOTAL SCORE: $total/95"
          echo "=========================="
          
          if [ $total -ge 70 ]; then
            echo "üéâ PASSED - Score: $total/95"
          else
            echo "‚ùå FAILED - Score: $total/95"
            exit 1
          fi